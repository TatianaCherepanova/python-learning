#–î–µ–ª–∏—Ç–µ–ª–∏-1 üå∂Ô∏è

'''–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –¥–≤–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞ a –∏ b (a<b). –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∏–∑ –æ—Ç—Ä–µ–∑–∫–∞ [a;b] —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π 
—Å—É–º–º–æ–π –¥–µ–ª–∏—Ç–µ–ª–µ–π.

–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è –¥–≤–∞ —á–∏—Å–ª–∞, –∫–∞–∂–¥–æ–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.

–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –¥–≤–∞ —á–∏—Å–ª–∞ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–º: —á–∏—Å–ª–æ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º–æ–π –¥–µ–ª–∏—Ç–µ–ª–µ–π –∏ —Å—É–º–º—É –µ–≥–æ –¥–µ–ª–∏—Ç–µ–ª–µ–π.'''

'''a < b, 
[a;b] 
[3;5]

a                         b
3 / 1 = ...   4 / 1 =     5 / 1 = 
3 / 2 = ...   4 / 2 =     5 / 2 = 
3 / 3 = ...   4 / 3 =     5 / 3 = 
              4 / 4 =     5 / 4 = '''

a = int(input())
b = int(input())
max_num_deliteley = 0  # –ß–∏—Å–ª–æ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º–æ–π –¥–µ–ª–∏—Ç–µ–ª–µ–π
sum_deliteley = 0  # –°—É–º–º–∞ –µ–≥–æ –¥–µ–ª–∏—Ç–µ–ª–µ–π
for i in range(a, b + 1):
    count = 0
    for j in range(1, i + 1):
        if i % j == 0:
            count += j
    if count >= sum_deliteley:
        sum_deliteley = count  
        max_num_deliteley = i
print(max_num_deliteley, sum_deliteley, sep = ' ')

#–ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –æ—Ç—Ä–µ–∑–∫–æ–≤

def intersection_of_segments_1 ():
    a1, b1, a2, b2 = int(input()), int(input()), int(input()), int(input())
    assert a1 < b1 and a2 < b2

    def my_min(x, y):
        return x if x < y else y

    def my_max(x, y):
        return x if x > y else y

    a3, b3 = my_max(a1, a2), my_min(b1, b2)
    if a3 < b3:
        print(a3, b3)
    elif a3 > b3:
        print("–ø—É—Å—Ç–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ")
    else:
        print(a3)
        
def intersection_of_segments_2 ():
    a1, b1, a2, b2 = int(input()), int(input()), int(input()), int(input())

    assert a1 < b1 and a2 < b2

    a3, b3 = max(a1, a2), min(b1, b2)
    if a3 < b3:
        print(a3, b3)
    elif a3 > b3:
        print("–ø—É—Å—Ç–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ")
    else:
        print(a3)

# –¶–≤–µ—Ç–∞ –∫–æ–ª–µ—Å–∞ —Ä—É–ª–µ—Ç–∫–∏

# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å—á–∏—Ç—ã–≤–∞–µ—Ç –Ω–æ–º–µ—Ä –∫–∞—Ä–º–∞–Ω–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ—Ç –∫–∞—Ä–º–∞–Ω –∑–µ–ª–µ–Ω—ã–º, –∫—Ä–∞—Å–Ω—ã–º –∏–ª–∏ —á–µ—Ä–Ω—ã–º. 
# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –ª–µ–∂–∏—Ç –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –æ—Ç # 0 –¥–æ 36.

# –ü—Ä–∏ —É—Å–ª–æ–≤–∏–∏: 
# –∫–∞—Ä–º–∞–Ω 0 –∑–µ–ª–µ–Ω—ã–π;
# –¥–ª—è –∫–∞—Ä–º–∞–Ω–æ–≤ —Å 1 –ø–æ 10 –∫–∞—Ä–º–∞–Ω—ã —Å –Ω–µ—á–µ—Ç–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º –∏–º–µ—é—Ç –∫—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç, –∫–∞—Ä–º–∞–Ω—ã —Å —á–µ—Ç–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º ‚Äì —á–µ—Ä–Ω—ã–π;
# –¥–ª—è –∫–∞—Ä–º–∞–Ω–æ–≤ —Å 11 –ø–æ 18 –∫–∞—Ä–º–∞–Ω—ã —Å –Ω–µ—á–µ—Ç–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º –∏–º–µ—é—Ç —á–µ—Ä–Ω—ã–π —Ü–≤–µ—Ç, –∫–∞—Ä–º–∞–Ω—ã —Å —á–µ—Ç–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º ‚Äì –∫—Ä–∞—Å–Ω—ã–π;
# –¥–ª—è –∫–∞—Ä–º–∞–Ω–æ–≤ —Å 19 –ø–æ 28 –∫–∞—Ä–º–∞–Ω—ã —Å –Ω–µ—á–µ—Ç–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º –∏–º–µ—é—Ç –∫—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç, –∫–∞—Ä–º–∞–Ω—ã —Å —á–µ—Ç–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º ‚Äì —á–µ—Ä–Ω—ã–π;
# –¥–ª—è –∫–∞—Ä–º–∞–Ω–æ–≤ —Å 29 –ø–æ 36 –∫–∞—Ä–º–∞–Ω—ã —Å –Ω–µ—á–µ—Ç–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º –∏–º–µ—é—Ç —á–µ—Ä–Ω—ã–π —Ü–≤–µ—Ç, –∫–∞—Ä–º–∞–Ω—ã —Å —á–µ—Ç–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º ‚Äì –∫—Ä–∞—Å–Ω—ã–π.

def color_roulet_1():
    a = int(input())
    if a < 0 or a > 36:
        print("–æ—à–∏–±–∫–∞ –≤–≤–æ–¥–∞")
    elif a == 0:
        print("–∑–µ–ª–µ–Ω—ã–π")
    elif 1 <= a <= 10: 
        print("–∫—Ä–∞—Å–Ω—ã–π" if a % 2 != 0 else "—á–µ—Ä–Ω—ã–π")
    elif 11 <= a <= 18: 
        print("—á–µ—Ä–Ω—ã–π" if a % 2 != 0 else "–∫—Ä–∞—Å–Ω—ã–π")
    elif 19 <= a <= 28: 
        print("–∫—Ä–∞—Å–Ω—ã–π" if a % 2 != 0 else "—á–µ—Ä–Ω—ã–π")
    else:
        print("—á–µ—Ä–Ω—ã–π" if a % 2 != 0 else "–∫—Ä–∞—Å–Ω—ã–π")

def color_roulet_1():
    a = int(input())
    print('–æ—à–∏–±–∫–∞ –≤–≤–æ–¥–∞' if not 0 <= a < 37 else '–∑–µ–ª–µ–Ω—ã–π' if a == 0 else ['—á–µ—Ä–Ω—ã–π','–∫—Ä–∞—Å–Ω—ã–π'][a % 2 == (1 <= a <= 10 or 19 <= a <= 28)])

# –¶–≤–µ—Ç–æ–≤–æ–π –º–∏–∫—à–µ—Ä

# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å—á–∏—Ç—ã–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –¥–≤—É—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤ –¥–ª—è —Å–º–µ—à–∏–≤–∞–Ω–∏—è. 
# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —á—Ç–æ-–Ω–∏–±—É–¥—å –ø–æ–º–∏–º–æ –Ω–∞–∑–≤–∞–Ω–∏–π ¬´–∫—Ä–∞—Å–Ω—ã–π¬ª, ¬´—Å–∏–Ω–∏–π¬ª –∏–ª–∏ ¬´–∂–µ–ª—Ç—ã–π¬ª, —Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ. 
# –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Ç–æ—Ä–∏—á–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∏—Ç—Å—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ.

# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è –¥–≤–µ —Å—Ç—Ä–æ–∫–∏, –∫–∞–∂–¥–∞—è –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.
# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ü–≤–µ—Ç —Å–º–µ—à–µ–Ω–∏—è –ª–∏–±–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ¬´–æ—à–∏–±–∫–∞ —Ü–≤–µ—Ç–∞¬ª, –µ—Å–ª–∏ –≤–≤–µ–¥—ë–Ω –±—ã–ª –Ω–µ —Ü–≤–µ—Ç.


def color_mix_1():
    a = str(input())
    b = str(input())
    if (a == "–∫—Ä–∞—Å–Ω—ã–π" and b == "—Å–∏–Ω–∏–π") or (a == "—Å–∏–Ω–∏–π" and b == "–∫—Ä–∞—Å–Ω—ã–π"):
        print("—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π")    
    elif (a == "–∫—Ä–∞—Å–Ω—ã–π" and b == "–∂–µ–ª—Ç—ã–π") or (a == "–∂–µ–ª—Ç—ã–π" and b == "–∫—Ä–∞—Å–Ω—ã–π"):
        print("–æ—Ä–∞–Ω–∂–µ–≤—ã–π")
    elif (a == "—Å–∏–Ω–∏–π" and b == "–∂–µ–ª—Ç—ã–π") or (a == "–∂–µ–ª—Ç—ã–π" and b == "—Å–∏–Ω–∏–π"):
        print("–∑–µ–ª–µ–Ω—ã–π")
    elif a == b == "–∫—Ä–∞—Å–Ω—ã–π":
        print("–∫—Ä–∞—Å–Ω—ã–π")
    elif a == b == "—Å–∏–Ω–∏–π":
        print("—Å–∏–Ω–∏–π")
    elif a == b == "–∂–µ–ª—Ç—ã–π":
        print("–∂–µ–ª—Ç—ã–π")
    elif a and b != "–∫—Ä–∞—Å–Ω—ã–π" or "—Å–∏–Ω–∏–π" or "–∂–µ–ª—Ç—ã–π":
        print("–æ—à–∏–±–∫–∞ —Ü–≤–µ—Ç–∞")
 
def color_mix_2():
    if a not in ("–∫—Ä–∞—Å–Ω—ã–π", "—Å–∏–Ω–∏–π", "–∂–µ–ª—Ç—ã–π") or b not in ("–∫—Ä–∞—Å–Ω—ã–π", "—Å–∏–Ω–∏–π", "–∂–µ–ª—Ç—ã–π"):
        print("–æ—à–∏–±–∫–∞ —Ü–≤–µ—Ç–∞")
    elif a == b:
        print("–∫—Ä–∞—Å–Ω—ã–π" if a == b == "–∫—Ä–∞—Å–Ω—ã–π" else "—Å–∏–Ω–∏–π" if a == b == "—Å–∏–Ω–∏–π" else "–∂–µ–ª—Ç—ã–π")
    elif (a == "–∫—Ä–∞—Å–Ω—ã–π" and b == "—Å–∏–Ω–∏–π") or (a == "—Å–∏–Ω–∏–π" and b == "–∫—Ä–∞—Å–Ω—ã–π"):
        print("—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π")    
    elif (a == "–∫—Ä–∞—Å–Ω—ã–π" and b == "–∂–µ–ª—Ç—ã–π") or (a == "–∂–µ–ª—Ç—ã–π" and b == "–∫—Ä–∞—Å–Ω—ã–π"):
        print("–æ—Ä–∞–Ω–∂–µ–≤—ã–π")
    elif (a == "—Å–∏–Ω–∏–π" and b == "–∂–µ–ª—Ç—ã–π") or (a == "–∂–µ–ª—Ç—ã–π" and b == "—Å–∏–Ω–∏–π"):
        print("–∑–µ–ª–µ–Ω—ã–π")

# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –º–µ—Å—è—Ü–µ (–≥–æ–¥ –Ω–µ –≤–∏—Å–æ–∫–æ—Å–Ω—ã–π)


def day_in_month():
    n = int(input())
    print(28 if n == 2 else 30 if n in (4, 6, 9, 11) else 31)

def_day_in_month_2():
    if n = 1 or n = 3 or n = 5 or n = 7 or n = 8 or n = 10 or n = 12:
        print("31")
    elif n = 4 or n = 6 or n = 9 or n = 11:
        print("30")
    else n = 2:
        print("28")


def_day_in_month_3():
    n = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    print(n[int(input())-1])

def_day_in_month_4():
    import calendar
    n = int(input())
    print(calendar.monthrange(2021,n)[1])

# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ –∏–∑ —Ç—Ä–µ—Ö

def average of three_1():
    a, b, c = int(input()), int(input()), int(input())
    if a > b > c:
        print(b)
    elif a > c > b:
        print(c)
    elif b > a > c:
        print(a)
    elif b > c > a:
        print(c)
    elif c > a > b:
        print(a)
    elif c > b > a:
        print(b)

def average of three_2():
    a, b, c = int(input()), int(input()), int(input())
    if a > b > c or c > b > a:
        print(b)
    elif a > c > b or b > c > a:
        print(c)
    elif b > a > c or c > a > b:
        print(a)

def average of three_3():
    a, b, c = int(input()), int(input()), int(input())
    print(b if a > b > c or c > b > a else c if a > c > b or b > c > a else a)
